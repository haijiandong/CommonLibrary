public static class NPOIExcel
    {
        /// <summary>
        /// 创建包含图片的Excel文件流
        /// </summary>
        /// <param name="table">数据表(其中图片路径数据必须是服务器相对路径)</param>
        /// <param name="colNum">图片在那一列保存，列数从左起0开始递增</param>
        /// <returns>Excel文件流</returns>
        public static MemoryStream CreateHaveImgExcelStream(DataTable table, int colNum)
        {
            //创建工作薄
            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheet = (HSSFSheet)workbook.CreateSheet("Sheet1");
            //填充列标题以及样式
            int rowsNum = 0;  //行号
            HSSFRow headerRow = (HSSFRow)sheet.CreateRow(rowsNum);
            int colCount = table.Columns.Count;

            for (int i = 0; i < colCount; i++)
            {
                headerRow.CreateCell(i, CellType.String).SetCellValue(table.Columns[i].Caption);  //填充列标题数据
            }
            HSSFRow row = null;
            rowsNum = 1;  //行号，从第2行开始
            //填充行数据
            foreach (DataRow r in table.Rows)
            {
                //写入字段值
                row = (HSSFRow)sheet.CreateRow(rowsNum);
                //每一列中添加数据
                for (int i = 0; i < colCount; i++)
                {
                    //如果当前将要填充的列是指定要增加图片数据
                    if (i == colNum)
                    {
                        byte[] bytes = System.IO.File.ReadAllBytes(r[i].ToString());
                        int pictureIdx = workbook.AddPicture(bytes, PictureType.PNG);
                        HSSFPatriarch patriarch = (HSSFPatriarch)sheet.CreateDrawingPatriarch();
                        HSSFClientAnchor anchor = new HSSFClientAnchor(0, 10, 1023, 0, colNum, rowsNum, colNum, rowsNum);  //给该列该行填充图片数据
                        HSSFPicture pict = (HSSFPicture)patriarch.CreatePicture(anchor, pictureIdx);
                        pict.Resize();
                        continue;
                    }
                    row.CreateCell(i, CellType.String).SetCellValue(r[i].ToString());
                }
                rowsNum++;
            }
            //列宽自适应，只对英文和数字有效
            for (int i = 0; i <= rowsNum; i++)
            {
                sheet.AutoSizeColumn(i);
            }
            MemoryStream ms = new MemoryStream();
            workbook.Write(ms);
            ms.Flush();
            ms.Position = 0;
            return ms;
        }

        /// <summary>
        /// 创建包含多列图片的Excel文件流
        /// </summary>
        /// <param name="table">数据表</param>
        /// <param name="colNums">图片所在列数组成的集合</param>
        /// <returns>Excel文件流</returns>
        public static MemoryStream CreateHaveImgExcelStream(DataTable table, List<int> colNums)
        {
            //创建工作薄
            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheet = (HSSFSheet)workbook.CreateSheet("Sheet1");
            //填充列标题以及样式
            int rowsNum = 0;  //行号
            HSSFRow headerRow = (HSSFRow)sheet.CreateRow(rowsNum);
            int colCount = table.Columns.Count;

            for (int i = 0; i < colCount; i++)
            {
                headerRow.CreateCell(i, CellType.String).SetCellValue(table.Columns[i].Caption);  //填充列标题数据
            }
            HSSFRow row = null;
            rowsNum = 1;  //行号，从第2行开始
            //填充行数据
            foreach (DataRow r in table.Rows)
            {
                //写入字段值
                row = (HSSFRow)sheet.CreateRow(rowsNum);
                //每一列中添加数据
                for (int i = 0; i < colCount; i++)
                {
                    //如果当前将要填充的列是指定要增加图片数据
                    if (colNums.Count() > 0)
                    {
                        bool flag = false;
                        //因为是要对多列填充图片，所以循环比较
                        colNums.ForEach(cn =>
                        {
                            if (i == cn)
                            {
                                byte[] bytes = System.IO.File.ReadAllBytes(r[i].ToString());
                                int pictureIdx = workbook.AddPicture(bytes, PictureType.PNG);
                                HSSFPatriarch patriarch = (HSSFPatriarch)sheet.CreateDrawingPatriarch();
                                HSSFClientAnchor anchor = new HSSFClientAnchor(0, 10, 1023, 0, cn, rowsNum, cn, rowsNum);  //给该列该行填充图片数据
                                HSSFPicture pict = (HSSFPicture)patriarch.CreatePicture(anchor, pictureIdx);
                                pict.Resize();
                                ////删除二维码
                                //if (System.IO.File.Exists(r[i].ToString()))
                                //{
                                //    System.IO.File.Delete(r[i].ToString());
                                //}
                            }
                        });
                        if (flag)
                        {
                            continue;
                        }
                    }
                    row.CreateCell(i, CellType.String).SetCellValue(r[i].ToString());
                }

                rowsNum++;
                ////删除二维码
                //if (System.IO.File.Exists(strQrCodePath))
                //{
                //    System.IO.File.Delete(strQrCodePath);
                //}
            }
            //列宽自适应，只对英文和数字有效
            for (int i = 0; i <= rowsNum; i++)
            {
                sheet.AutoSizeColumn(i);
            }
            MemoryStream ms = new MemoryStream();
            workbook.Write(ms);
            ms.Flush();
            ms.Position = 0;
            return ms;
        }
        /// <summary>
        /// 创建Excel文件流
        /// </summary>
        /// <param name="table">数据表</param>
        /// <returns>Excel文件流</returns>
        public static MemoryStream CreateExcelStream(DataTable table)
        {
            //创建工作薄
            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheet = (HSSFSheet)workbook.CreateSheet("Sheet1");
            //填充列标题以及样式
            int rowsNum = 0;  //行号
            HSSFRow headerRow = (HSSFRow)sheet.CreateRow(rowsNum);
            int colCount = table.Columns.Count;

            for (int i = 0; i < colCount; i++)
            {
                headerRow.CreateCell(i, CellType.String).SetCellValue(table.Columns[i].Caption);  //填充列标题数据
            }
            HSSFRow row = null;
            rowsNum = 1;  //行号，从第2行开始
            //填充行数据
            foreach (DataRow r in table.Rows)
            {
                //写入字段值
                row = (HSSFRow)sheet.CreateRow(rowsNum);
                //每一列中添加数据
                for (int i = 0; i < colCount; i++)
                {
                    row.CreateCell(i, CellType.String).SetCellValue(r[i].ToString());
                }

                rowsNum++;
            }
            //列宽自适应，只对英文和数字有效
            for (int i = 0; i <= rowsNum; i++)
            {
                sheet.AutoSizeColumn(i);
            }
            MemoryStream ms = new MemoryStream();
            workbook.Write(ms);
            ms.Flush();
            ms.Position = 0;
            return ms;
        }
    }
